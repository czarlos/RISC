// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UpgradeOrder.proto

#ifndef PROTOBUF_UpgradeOrder_2eproto__INCLUDED
#define PROTOBUF_UpgradeOrder_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Unit.pb.h"
#include "UnitType.pb.h"
#include "TechnologyManager.pb.h"
// @@protoc_insertion_point(includes)

namespace Buffers {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UpgradeOrder_2eproto();
void protobuf_AssignDesc_UpgradeOrder_2eproto();
void protobuf_ShutdownFile_UpgradeOrder_2eproto();

class UpgradeOrder;

// ===================================================================

class UpgradeOrder : public ::google::protobuf::Message {
 public:
  UpgradeOrder();
  virtual ~UpgradeOrder();

  UpgradeOrder(const UpgradeOrder& from);

  inline UpgradeOrder& operator=(const UpgradeOrder& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpgradeOrder& default_instance();

  void Swap(UpgradeOrder* other);

  // implements Message ----------------------------------------------

  UpgradeOrder* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpgradeOrder& from);
  void MergeFrom(const UpgradeOrder& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Buffers.Unit unitsToUpgrade = 1;
  inline int unitstoupgrade_size() const;
  inline void clear_unitstoupgrade();
  static const int kUnitsToUpgradeFieldNumber = 1;
  inline const ::Buffers::Unit& unitstoupgrade(int index) const;
  inline ::Buffers::Unit* mutable_unitstoupgrade(int index);
  inline ::Buffers::Unit* add_unitstoupgrade();
  inline const ::google::protobuf::RepeatedPtrField< ::Buffers::Unit >&
      unitstoupgrade() const;
  inline ::google::protobuf::RepeatedPtrField< ::Buffers::Unit >*
      mutable_unitstoupgrade();

  // required .Buffers.UnitType unitType = 2;
  inline bool has_unittype() const;
  inline void clear_unittype();
  static const int kUnitTypeFieldNumber = 2;
  inline const ::Buffers::UnitType& unittype() const;
  inline ::Buffers::UnitType* mutable_unittype();
  inline ::Buffers::UnitType* release_unittype();
  inline void set_allocated_unittype(::Buffers::UnitType* unittype);

  // required .Buffers.TechnologyManager technologyManager = 3;
  inline bool has_technologymanager() const;
  inline void clear_technologymanager();
  static const int kTechnologyManagerFieldNumber = 3;
  inline const ::Buffers::TechnologyManager& technologymanager() const;
  inline ::Buffers::TechnologyManager* mutable_technologymanager();
  inline ::Buffers::TechnologyManager* release_technologymanager();
  inline void set_allocated_technologymanager(::Buffers::TechnologyManager* technologymanager);

  // required bool unlocking = 4;
  inline bool has_unlocking() const;
  inline void clear_unlocking();
  static const int kUnlockingFieldNumber = 4;
  inline bool unlocking() const;
  inline void set_unlocking(bool value);

  // required bool unitUpgrading = 5;
  inline bool has_unitupgrading() const;
  inline void clear_unitupgrading();
  static const int kUnitUpgradingFieldNumber = 5;
  inline bool unitupgrading() const;
  inline void set_unitupgrading(bool value);

  // required bool convertingUpgrade = 6;
  inline bool has_convertingupgrade() const;
  inline void clear_convertingupgrade();
  static const int kConvertingUpgradeFieldNumber = 6;
  inline bool convertingupgrade() const;
  inline void set_convertingupgrade(bool value);

  // required bool makeSpy = 7;
  inline bool has_makespy() const;
  inline void clear_makespy();
  static const int kMakeSpyFieldNumber = 7;
  inline bool makespy() const;
  inline void set_makespy(bool value);

  // @@protoc_insertion_point(class_scope:Buffers.UpgradeOrder)
 private:
  inline void set_has_unittype();
  inline void clear_has_unittype();
  inline void set_has_technologymanager();
  inline void clear_has_technologymanager();
  inline void set_has_unlocking();
  inline void clear_has_unlocking();
  inline void set_has_unitupgrading();
  inline void clear_has_unitupgrading();
  inline void set_has_convertingupgrade();
  inline void clear_has_convertingupgrade();
  inline void set_has_makespy();
  inline void clear_has_makespy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Buffers::Unit > unitstoupgrade_;
  ::Buffers::UnitType* unittype_;
  ::Buffers::TechnologyManager* technologymanager_;
  bool unlocking_;
  bool unitupgrading_;
  bool convertingupgrade_;
  bool makespy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_UpgradeOrder_2eproto();
  friend void protobuf_AssignDesc_UpgradeOrder_2eproto();
  friend void protobuf_ShutdownFile_UpgradeOrder_2eproto();

  void InitAsDefaultInstance();
  static UpgradeOrder* default_instance_;
};
// ===================================================================


// ===================================================================

// UpgradeOrder

// repeated .Buffers.Unit unitsToUpgrade = 1;
inline int UpgradeOrder::unitstoupgrade_size() const {
  return unitstoupgrade_.size();
}
inline void UpgradeOrder::clear_unitstoupgrade() {
  unitstoupgrade_.Clear();
}
inline const ::Buffers::Unit& UpgradeOrder::unitstoupgrade(int index) const {
  return unitstoupgrade_.Get(index);
}
inline ::Buffers::Unit* UpgradeOrder::mutable_unitstoupgrade(int index) {
  return unitstoupgrade_.Mutable(index);
}
inline ::Buffers::Unit* UpgradeOrder::add_unitstoupgrade() {
  return unitstoupgrade_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Buffers::Unit >&
UpgradeOrder::unitstoupgrade() const {
  return unitstoupgrade_;
}
inline ::google::protobuf::RepeatedPtrField< ::Buffers::Unit >*
UpgradeOrder::mutable_unitstoupgrade() {
  return &unitstoupgrade_;
}

// required .Buffers.UnitType unitType = 2;
inline bool UpgradeOrder::has_unittype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpgradeOrder::set_has_unittype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpgradeOrder::clear_has_unittype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpgradeOrder::clear_unittype() {
  if (unittype_ != NULL) unittype_->::Buffers::UnitType::Clear();
  clear_has_unittype();
}
inline const ::Buffers::UnitType& UpgradeOrder::unittype() const {
  return unittype_ != NULL ? *unittype_ : *default_instance_->unittype_;
}
inline ::Buffers::UnitType* UpgradeOrder::mutable_unittype() {
  set_has_unittype();
  if (unittype_ == NULL) unittype_ = new ::Buffers::UnitType;
  return unittype_;
}
inline ::Buffers::UnitType* UpgradeOrder::release_unittype() {
  clear_has_unittype();
  ::Buffers::UnitType* temp = unittype_;
  unittype_ = NULL;
  return temp;
}
inline void UpgradeOrder::set_allocated_unittype(::Buffers::UnitType* unittype) {
  delete unittype_;
  unittype_ = unittype;
  if (unittype) {
    set_has_unittype();
  } else {
    clear_has_unittype();
  }
}

// required .Buffers.TechnologyManager technologyManager = 3;
inline bool UpgradeOrder::has_technologymanager() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpgradeOrder::set_has_technologymanager() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpgradeOrder::clear_has_technologymanager() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpgradeOrder::clear_technologymanager() {
  if (technologymanager_ != NULL) technologymanager_->::Buffers::TechnologyManager::Clear();
  clear_has_technologymanager();
}
inline const ::Buffers::TechnologyManager& UpgradeOrder::technologymanager() const {
  return technologymanager_ != NULL ? *technologymanager_ : *default_instance_->technologymanager_;
}
inline ::Buffers::TechnologyManager* UpgradeOrder::mutable_technologymanager() {
  set_has_technologymanager();
  if (technologymanager_ == NULL) technologymanager_ = new ::Buffers::TechnologyManager;
  return technologymanager_;
}
inline ::Buffers::TechnologyManager* UpgradeOrder::release_technologymanager() {
  clear_has_technologymanager();
  ::Buffers::TechnologyManager* temp = technologymanager_;
  technologymanager_ = NULL;
  return temp;
}
inline void UpgradeOrder::set_allocated_technologymanager(::Buffers::TechnologyManager* technologymanager) {
  delete technologymanager_;
  technologymanager_ = technologymanager;
  if (technologymanager) {
    set_has_technologymanager();
  } else {
    clear_has_technologymanager();
  }
}

// required bool unlocking = 4;
inline bool UpgradeOrder::has_unlocking() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpgradeOrder::set_has_unlocking() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpgradeOrder::clear_has_unlocking() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpgradeOrder::clear_unlocking() {
  unlocking_ = false;
  clear_has_unlocking();
}
inline bool UpgradeOrder::unlocking() const {
  return unlocking_;
}
inline void UpgradeOrder::set_unlocking(bool value) {
  set_has_unlocking();
  unlocking_ = value;
}

// required bool unitUpgrading = 5;
inline bool UpgradeOrder::has_unitupgrading() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpgradeOrder::set_has_unitupgrading() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpgradeOrder::clear_has_unitupgrading() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpgradeOrder::clear_unitupgrading() {
  unitupgrading_ = false;
  clear_has_unitupgrading();
}
inline bool UpgradeOrder::unitupgrading() const {
  return unitupgrading_;
}
inline void UpgradeOrder::set_unitupgrading(bool value) {
  set_has_unitupgrading();
  unitupgrading_ = value;
}

// required bool convertingUpgrade = 6;
inline bool UpgradeOrder::has_convertingupgrade() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UpgradeOrder::set_has_convertingupgrade() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UpgradeOrder::clear_has_convertingupgrade() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UpgradeOrder::clear_convertingupgrade() {
  convertingupgrade_ = false;
  clear_has_convertingupgrade();
}
inline bool UpgradeOrder::convertingupgrade() const {
  return convertingupgrade_;
}
inline void UpgradeOrder::set_convertingupgrade(bool value) {
  set_has_convertingupgrade();
  convertingupgrade_ = value;
}

// required bool makeSpy = 7;
inline bool UpgradeOrder::has_makespy() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UpgradeOrder::set_has_makespy() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UpgradeOrder::clear_has_makespy() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UpgradeOrder::clear_makespy() {
  makespy_ = false;
  clear_has_makespy();
}
inline bool UpgradeOrder::makespy() const {
  return makespy_;
}
inline void UpgradeOrder::set_makespy(bool value) {
  set_has_makespy();
  makespy_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Buffers

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UpgradeOrder_2eproto__INCLUDED
