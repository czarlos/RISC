// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Unit.proto

#ifndef PROTOBUF_Unit_2eproto__INCLUDED
#define PROTOBUF_Unit_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "UnitType.pb.h"
// @@protoc_insertion_point(includes)

namespace Buffers {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Unit_2eproto();
void protobuf_AssignDesc_Unit_2eproto();
void protobuf_ShutdownFile_Unit_2eproto();

class Unit;

// ===================================================================

class Unit : public ::google::protobuf::Message {
 public:
  Unit();
  virtual ~Unit();

  Unit(const Unit& from);

  inline Unit& operator=(const Unit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Unit& default_instance();

  void Swap(Unit* other);

  // implements Message ----------------------------------------------

  Unit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Unit& from);
  void MergeFrom(const Unit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 health = 1;
  inline bool has_health() const;
  inline void clear_health();
  static const int kHealthFieldNumber = 1;
  inline ::google::protobuf::int32 health() const;
  inline void set_health(::google::protobuf::int32 value);

  // required .Buffers.UnitType unitType = 2;
  inline bool has_unittype() const;
  inline void clear_unittype();
  static const int kUnitTypeFieldNumber = 2;
  inline const ::Buffers::UnitType& unittype() const;
  inline ::Buffers::UnitType* mutable_unittype();
  inline ::Buffers::UnitType* release_unittype();
  inline void set_allocated_unittype(::Buffers::UnitType* unittype);

  // required string teamName = 3;
  inline bool has_teamname() const;
  inline void clear_teamname();
  static const int kTeamNameFieldNumber = 3;
  inline const ::std::string& teamname() const;
  inline void set_teamname(const ::std::string& value);
  inline void set_teamname(const char* value);
  inline void set_teamname(const char* value, size_t size);
  inline ::std::string* mutable_teamname();
  inline ::std::string* release_teamname();
  inline void set_allocated_teamname(::std::string* teamname);

  // required string unitID = 4;
  inline bool has_unitid() const;
  inline void clear_unitid();
  static const int kUnitIDFieldNumber = 4;
  inline const ::std::string& unitid() const;
  inline void set_unitid(const ::std::string& value);
  inline void set_unitid(const char* value);
  inline void set_unitid(const char* value, size_t size);
  inline ::std::string* mutable_unitid();
  inline ::std::string* release_unitid();
  inline void set_allocated_unitid(::std::string* unitid);

  // required int32 movementRange = 5;
  inline bool has_movementrange() const;
  inline void clear_movementrange();
  static const int kMovementRangeFieldNumber = 5;
  inline ::google::protobuf::int32 movementrange() const;
  inline void set_movementrange(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Buffers.Unit)
 private:
  inline void set_has_health();
  inline void clear_has_health();
  inline void set_has_unittype();
  inline void clear_has_unittype();
  inline void set_has_teamname();
  inline void clear_has_teamname();
  inline void set_has_unitid();
  inline void clear_has_unitid();
  inline void set_has_movementrange();
  inline void clear_has_movementrange();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Buffers::UnitType* unittype_;
  ::std::string* teamname_;
  ::google::protobuf::int32 health_;
  ::google::protobuf::int32 movementrange_;
  ::std::string* unitid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Unit_2eproto();
  friend void protobuf_AssignDesc_Unit_2eproto();
  friend void protobuf_ShutdownFile_Unit_2eproto();

  void InitAsDefaultInstance();
  static Unit* default_instance_;
};
// ===================================================================


// ===================================================================

// Unit

// required int32 health = 1;
inline bool Unit::has_health() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Unit::set_has_health() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Unit::clear_has_health() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Unit::clear_health() {
  health_ = 0;
  clear_has_health();
}
inline ::google::protobuf::int32 Unit::health() const {
  return health_;
}
inline void Unit::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
}

// required .Buffers.UnitType unitType = 2;
inline bool Unit::has_unittype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Unit::set_has_unittype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Unit::clear_has_unittype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Unit::clear_unittype() {
  if (unittype_ != NULL) unittype_->::Buffers::UnitType::Clear();
  clear_has_unittype();
}
inline const ::Buffers::UnitType& Unit::unittype() const {
  return unittype_ != NULL ? *unittype_ : *default_instance_->unittype_;
}
inline ::Buffers::UnitType* Unit::mutable_unittype() {
  set_has_unittype();
  if (unittype_ == NULL) unittype_ = new ::Buffers::UnitType;
  return unittype_;
}
inline ::Buffers::UnitType* Unit::release_unittype() {
  clear_has_unittype();
  ::Buffers::UnitType* temp = unittype_;
  unittype_ = NULL;
  return temp;
}
inline void Unit::set_allocated_unittype(::Buffers::UnitType* unittype) {
  delete unittype_;
  unittype_ = unittype;
  if (unittype) {
    set_has_unittype();
  } else {
    clear_has_unittype();
  }
}

// required string teamName = 3;
inline bool Unit::has_teamname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Unit::set_has_teamname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Unit::clear_has_teamname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Unit::clear_teamname() {
  if (teamname_ != &::google::protobuf::internal::kEmptyString) {
    teamname_->clear();
  }
  clear_has_teamname();
}
inline const ::std::string& Unit::teamname() const {
  return *teamname_;
}
inline void Unit::set_teamname(const ::std::string& value) {
  set_has_teamname();
  if (teamname_ == &::google::protobuf::internal::kEmptyString) {
    teamname_ = new ::std::string;
  }
  teamname_->assign(value);
}
inline void Unit::set_teamname(const char* value) {
  set_has_teamname();
  if (teamname_ == &::google::protobuf::internal::kEmptyString) {
    teamname_ = new ::std::string;
  }
  teamname_->assign(value);
}
inline void Unit::set_teamname(const char* value, size_t size) {
  set_has_teamname();
  if (teamname_ == &::google::protobuf::internal::kEmptyString) {
    teamname_ = new ::std::string;
  }
  teamname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Unit::mutable_teamname() {
  set_has_teamname();
  if (teamname_ == &::google::protobuf::internal::kEmptyString) {
    teamname_ = new ::std::string;
  }
  return teamname_;
}
inline ::std::string* Unit::release_teamname() {
  clear_has_teamname();
  if (teamname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = teamname_;
    teamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Unit::set_allocated_teamname(::std::string* teamname) {
  if (teamname_ != &::google::protobuf::internal::kEmptyString) {
    delete teamname_;
  }
  if (teamname) {
    set_has_teamname();
    teamname_ = teamname;
  } else {
    clear_has_teamname();
    teamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string unitID = 4;
inline bool Unit::has_unitid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Unit::set_has_unitid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Unit::clear_has_unitid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Unit::clear_unitid() {
  if (unitid_ != &::google::protobuf::internal::kEmptyString) {
    unitid_->clear();
  }
  clear_has_unitid();
}
inline const ::std::string& Unit::unitid() const {
  return *unitid_;
}
inline void Unit::set_unitid(const ::std::string& value) {
  set_has_unitid();
  if (unitid_ == &::google::protobuf::internal::kEmptyString) {
    unitid_ = new ::std::string;
  }
  unitid_->assign(value);
}
inline void Unit::set_unitid(const char* value) {
  set_has_unitid();
  if (unitid_ == &::google::protobuf::internal::kEmptyString) {
    unitid_ = new ::std::string;
  }
  unitid_->assign(value);
}
inline void Unit::set_unitid(const char* value, size_t size) {
  set_has_unitid();
  if (unitid_ == &::google::protobuf::internal::kEmptyString) {
    unitid_ = new ::std::string;
  }
  unitid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Unit::mutable_unitid() {
  set_has_unitid();
  if (unitid_ == &::google::protobuf::internal::kEmptyString) {
    unitid_ = new ::std::string;
  }
  return unitid_;
}
inline ::std::string* Unit::release_unitid() {
  clear_has_unitid();
  if (unitid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unitid_;
    unitid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Unit::set_allocated_unitid(::std::string* unitid) {
  if (unitid_ != &::google::protobuf::internal::kEmptyString) {
    delete unitid_;
  }
  if (unitid) {
    set_has_unitid();
    unitid_ = unitid;
  } else {
    clear_has_unitid();
    unitid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 movementRange = 5;
inline bool Unit::has_movementrange() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Unit::set_has_movementrange() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Unit::clear_has_movementrange() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Unit::clear_movementrange() {
  movementrange_ = 0;
  clear_has_movementrange();
}
inline ::google::protobuf::int32 Unit::movementrange() const {
  return movementrange_;
}
inline void Unit::set_movementrange(::google::protobuf::int32 value) {
  set_has_movementrange();
  movementrange_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Buffers

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Unit_2eproto__INCLUDED
