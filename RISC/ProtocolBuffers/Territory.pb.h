// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Territory.proto

#ifndef PROTOBUF_Territory_2eproto__INCLUDED
#define PROTOBUF_Territory_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Unit.pb.h"
#include "Location.pb.h"
// @@protoc_insertion_point(includes)

namespace Buffers {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Territory_2eproto();
void protobuf_AssignDesc_Territory_2eproto();
void protobuf_ShutdownFile_Territory_2eproto();

class Territory;
class Territory_ResourceType;

// ===================================================================

class Territory_ResourceType : public ::google::protobuf::Message {
 public:
  Territory_ResourceType();
  virtual ~Territory_ResourceType();

  Territory_ResourceType(const Territory_ResourceType& from);

  inline Territory_ResourceType& operator=(const Territory_ResourceType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Territory_ResourceType& default_instance();

  void Swap(Territory_ResourceType* other);

  // implements Message ----------------------------------------------

  Territory_ResourceType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Territory_ResourceType& from);
  void MergeFrom(const Territory_ResourceType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string resourceName = 1;
  inline bool has_resourcename() const;
  inline void clear_resourcename();
  static const int kResourceNameFieldNumber = 1;
  inline const ::std::string& resourcename() const;
  inline void set_resourcename(const ::std::string& value);
  inline void set_resourcename(const char* value);
  inline void set_resourcename(const char* value, size_t size);
  inline ::std::string* mutable_resourcename();
  inline ::std::string* release_resourcename();
  inline void set_allocated_resourcename(::std::string* resourcename);

  // @@protoc_insertion_point(class_scope:Buffers.Territory.ResourceType)
 private:
  inline void set_has_resourcename();
  inline void clear_has_resourcename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* resourcename_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Territory_2eproto();
  friend void protobuf_AssignDesc_Territory_2eproto();
  friend void protobuf_ShutdownFile_Territory_2eproto();

  void InitAsDefaultInstance();
  static Territory_ResourceType* default_instance_;
};
// -------------------------------------------------------------------

class Territory : public ::google::protobuf::Message {
 public:
  Territory();
  virtual ~Territory();

  Territory(const Territory& from);

  inline Territory& operator=(const Territory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Territory& default_instance();

  void Swap(Territory* other);

  // implements Message ----------------------------------------------

  Territory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Territory& from);
  void MergeFrom(const Territory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Territory_ResourceType ResourceType;

  // accessors -------------------------------------------------------

  // optional string territoryID = 1;
  inline bool has_territoryid() const;
  inline void clear_territoryid();
  static const int kTerritoryIDFieldNumber = 1;
  inline const ::std::string& territoryid() const;
  inline void set_territoryid(const ::std::string& value);
  inline void set_territoryid(const char* value);
  inline void set_territoryid(const char* value, size_t size);
  inline ::std::string* mutable_territoryid();
  inline ::std::string* release_territoryid();
  inline void set_allocated_territoryid(::std::string* territoryid);

  // optional string owner = 2;
  inline bool has_owner() const;
  inline void clear_owner();
  static const int kOwnerFieldNumber = 2;
  inline const ::std::string& owner() const;
  inline void set_owner(const ::std::string& value);
  inline void set_owner(const char* value);
  inline void set_owner(const char* value, size_t size);
  inline ::std::string* mutable_owner();
  inline ::std::string* release_owner();
  inline void set_allocated_owner(::std::string* owner);

  // optional int32 maxResourceProduction = 3;
  inline bool has_maxresourceproduction() const;
  inline void clear_maxresourceproduction();
  static const int kMaxResourceProductionFieldNumber = 3;
  inline ::google::protobuf::int32 maxresourceproduction() const;
  inline void set_maxresourceproduction(::google::protobuf::int32 value);

  // optional int32 maxCapacity = 4;
  inline bool has_maxcapacity() const;
  inline void clear_maxcapacity();
  static const int kMaxCapacityFieldNumber = 4;
  inline ::google::protobuf::int32 maxcapacity() const;
  inline void set_maxcapacity(::google::protobuf::int32 value);

  // repeated .Buffers.Territory.ResourceType production = 5;
  inline int production_size() const;
  inline void clear_production();
  static const int kProductionFieldNumber = 5;
  inline const ::Buffers::Territory_ResourceType& production(int index) const;
  inline ::Buffers::Territory_ResourceType* mutable_production(int index);
  inline ::Buffers::Territory_ResourceType* add_production();
  inline const ::google::protobuf::RepeatedPtrField< ::Buffers::Territory_ResourceType >&
      production() const;
  inline ::google::protobuf::RepeatedPtrField< ::Buffers::Territory_ResourceType >*
      mutable_production();

  // required .Buffers.Location location = 6;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 6;
  inline const ::Buffers::Location& location() const;
  inline ::Buffers::Location* mutable_location();
  inline ::Buffers::Location* release_location();
  inline void set_allocated_location(::Buffers::Location* location);

  // repeated .Buffers.Unit contents = 7;
  inline int contents_size() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 7;
  inline const ::Buffers::Unit& contents(int index) const;
  inline ::Buffers::Unit* mutable_contents(int index);
  inline ::Buffers::Unit* add_contents();
  inline const ::google::protobuf::RepeatedPtrField< ::Buffers::Unit >&
      contents() const;
  inline ::google::protobuf::RepeatedPtrField< ::Buffers::Unit >*
      mutable_contents();

  // required bool visible = 8;
  inline bool has_visible() const;
  inline void clear_visible();
  static const int kVisibleFieldNumber = 8;
  inline bool visible() const;
  inline void set_visible(bool value);

  // @@protoc_insertion_point(class_scope:Buffers.Territory)
 private:
  inline void set_has_territoryid();
  inline void clear_has_territoryid();
  inline void set_has_owner();
  inline void clear_has_owner();
  inline void set_has_maxresourceproduction();
  inline void clear_has_maxresourceproduction();
  inline void set_has_maxcapacity();
  inline void clear_has_maxcapacity();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_visible();
  inline void clear_has_visible();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* territoryid_;
  ::std::string* owner_;
  ::google::protobuf::int32 maxresourceproduction_;
  ::google::protobuf::int32 maxcapacity_;
  ::google::protobuf::RepeatedPtrField< ::Buffers::Territory_ResourceType > production_;
  ::Buffers::Location* location_;
  ::google::protobuf::RepeatedPtrField< ::Buffers::Unit > contents_;
  bool visible_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Territory_2eproto();
  friend void protobuf_AssignDesc_Territory_2eproto();
  friend void protobuf_ShutdownFile_Territory_2eproto();

  void InitAsDefaultInstance();
  static Territory* default_instance_;
};
// ===================================================================


// ===================================================================

// Territory_ResourceType

// required string resourceName = 1;
inline bool Territory_ResourceType::has_resourcename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Territory_ResourceType::set_has_resourcename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Territory_ResourceType::clear_has_resourcename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Territory_ResourceType::clear_resourcename() {
  if (resourcename_ != &::google::protobuf::internal::kEmptyString) {
    resourcename_->clear();
  }
  clear_has_resourcename();
}
inline const ::std::string& Territory_ResourceType::resourcename() const {
  return *resourcename_;
}
inline void Territory_ResourceType::set_resourcename(const ::std::string& value) {
  set_has_resourcename();
  if (resourcename_ == &::google::protobuf::internal::kEmptyString) {
    resourcename_ = new ::std::string;
  }
  resourcename_->assign(value);
}
inline void Territory_ResourceType::set_resourcename(const char* value) {
  set_has_resourcename();
  if (resourcename_ == &::google::protobuf::internal::kEmptyString) {
    resourcename_ = new ::std::string;
  }
  resourcename_->assign(value);
}
inline void Territory_ResourceType::set_resourcename(const char* value, size_t size) {
  set_has_resourcename();
  if (resourcename_ == &::google::protobuf::internal::kEmptyString) {
    resourcename_ = new ::std::string;
  }
  resourcename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Territory_ResourceType::mutable_resourcename() {
  set_has_resourcename();
  if (resourcename_ == &::google::protobuf::internal::kEmptyString) {
    resourcename_ = new ::std::string;
  }
  return resourcename_;
}
inline ::std::string* Territory_ResourceType::release_resourcename() {
  clear_has_resourcename();
  if (resourcename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resourcename_;
    resourcename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Territory_ResourceType::set_allocated_resourcename(::std::string* resourcename) {
  if (resourcename_ != &::google::protobuf::internal::kEmptyString) {
    delete resourcename_;
  }
  if (resourcename) {
    set_has_resourcename();
    resourcename_ = resourcename;
  } else {
    clear_has_resourcename();
    resourcename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Territory

// optional string territoryID = 1;
inline bool Territory::has_territoryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Territory::set_has_territoryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Territory::clear_has_territoryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Territory::clear_territoryid() {
  if (territoryid_ != &::google::protobuf::internal::kEmptyString) {
    territoryid_->clear();
  }
  clear_has_territoryid();
}
inline const ::std::string& Territory::territoryid() const {
  return *territoryid_;
}
inline void Territory::set_territoryid(const ::std::string& value) {
  set_has_territoryid();
  if (territoryid_ == &::google::protobuf::internal::kEmptyString) {
    territoryid_ = new ::std::string;
  }
  territoryid_->assign(value);
}
inline void Territory::set_territoryid(const char* value) {
  set_has_territoryid();
  if (territoryid_ == &::google::protobuf::internal::kEmptyString) {
    territoryid_ = new ::std::string;
  }
  territoryid_->assign(value);
}
inline void Territory::set_territoryid(const char* value, size_t size) {
  set_has_territoryid();
  if (territoryid_ == &::google::protobuf::internal::kEmptyString) {
    territoryid_ = new ::std::string;
  }
  territoryid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Territory::mutable_territoryid() {
  set_has_territoryid();
  if (territoryid_ == &::google::protobuf::internal::kEmptyString) {
    territoryid_ = new ::std::string;
  }
  return territoryid_;
}
inline ::std::string* Territory::release_territoryid() {
  clear_has_territoryid();
  if (territoryid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = territoryid_;
    territoryid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Territory::set_allocated_territoryid(::std::string* territoryid) {
  if (territoryid_ != &::google::protobuf::internal::kEmptyString) {
    delete territoryid_;
  }
  if (territoryid) {
    set_has_territoryid();
    territoryid_ = territoryid;
  } else {
    clear_has_territoryid();
    territoryid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string owner = 2;
inline bool Territory::has_owner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Territory::set_has_owner() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Territory::clear_has_owner() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Territory::clear_owner() {
  if (owner_ != &::google::protobuf::internal::kEmptyString) {
    owner_->clear();
  }
  clear_has_owner();
}
inline const ::std::string& Territory::owner() const {
  return *owner_;
}
inline void Territory::set_owner(const ::std::string& value) {
  set_has_owner();
  if (owner_ == &::google::protobuf::internal::kEmptyString) {
    owner_ = new ::std::string;
  }
  owner_->assign(value);
}
inline void Territory::set_owner(const char* value) {
  set_has_owner();
  if (owner_ == &::google::protobuf::internal::kEmptyString) {
    owner_ = new ::std::string;
  }
  owner_->assign(value);
}
inline void Territory::set_owner(const char* value, size_t size) {
  set_has_owner();
  if (owner_ == &::google::protobuf::internal::kEmptyString) {
    owner_ = new ::std::string;
  }
  owner_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Territory::mutable_owner() {
  set_has_owner();
  if (owner_ == &::google::protobuf::internal::kEmptyString) {
    owner_ = new ::std::string;
  }
  return owner_;
}
inline ::std::string* Territory::release_owner() {
  clear_has_owner();
  if (owner_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = owner_;
    owner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Territory::set_allocated_owner(::std::string* owner) {
  if (owner_ != &::google::protobuf::internal::kEmptyString) {
    delete owner_;
  }
  if (owner) {
    set_has_owner();
    owner_ = owner;
  } else {
    clear_has_owner();
    owner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 maxResourceProduction = 3;
inline bool Territory::has_maxresourceproduction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Territory::set_has_maxresourceproduction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Territory::clear_has_maxresourceproduction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Territory::clear_maxresourceproduction() {
  maxresourceproduction_ = 0;
  clear_has_maxresourceproduction();
}
inline ::google::protobuf::int32 Territory::maxresourceproduction() const {
  return maxresourceproduction_;
}
inline void Territory::set_maxresourceproduction(::google::protobuf::int32 value) {
  set_has_maxresourceproduction();
  maxresourceproduction_ = value;
}

// optional int32 maxCapacity = 4;
inline bool Territory::has_maxcapacity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Territory::set_has_maxcapacity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Territory::clear_has_maxcapacity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Territory::clear_maxcapacity() {
  maxcapacity_ = 0;
  clear_has_maxcapacity();
}
inline ::google::protobuf::int32 Territory::maxcapacity() const {
  return maxcapacity_;
}
inline void Territory::set_maxcapacity(::google::protobuf::int32 value) {
  set_has_maxcapacity();
  maxcapacity_ = value;
}

// repeated .Buffers.Territory.ResourceType production = 5;
inline int Territory::production_size() const {
  return production_.size();
}
inline void Territory::clear_production() {
  production_.Clear();
}
inline const ::Buffers::Territory_ResourceType& Territory::production(int index) const {
  return production_.Get(index);
}
inline ::Buffers::Territory_ResourceType* Territory::mutable_production(int index) {
  return production_.Mutable(index);
}
inline ::Buffers::Territory_ResourceType* Territory::add_production() {
  return production_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Buffers::Territory_ResourceType >&
Territory::production() const {
  return production_;
}
inline ::google::protobuf::RepeatedPtrField< ::Buffers::Territory_ResourceType >*
Territory::mutable_production() {
  return &production_;
}

// required .Buffers.Location location = 6;
inline bool Territory::has_location() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Territory::set_has_location() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Territory::clear_has_location() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Territory::clear_location() {
  if (location_ != NULL) location_->::Buffers::Location::Clear();
  clear_has_location();
}
inline const ::Buffers::Location& Territory::location() const {
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::Buffers::Location* Territory::mutable_location() {
  set_has_location();
  if (location_ == NULL) location_ = new ::Buffers::Location;
  return location_;
}
inline ::Buffers::Location* Territory::release_location() {
  clear_has_location();
  ::Buffers::Location* temp = location_;
  location_ = NULL;
  return temp;
}
inline void Territory::set_allocated_location(::Buffers::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
}

// repeated .Buffers.Unit contents = 7;
inline int Territory::contents_size() const {
  return contents_.size();
}
inline void Territory::clear_contents() {
  contents_.Clear();
}
inline const ::Buffers::Unit& Territory::contents(int index) const {
  return contents_.Get(index);
}
inline ::Buffers::Unit* Territory::mutable_contents(int index) {
  return contents_.Mutable(index);
}
inline ::Buffers::Unit* Territory::add_contents() {
  return contents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Buffers::Unit >&
Territory::contents() const {
  return contents_;
}
inline ::google::protobuf::RepeatedPtrField< ::Buffers::Unit >*
Territory::mutable_contents() {
  return &contents_;
}

// required bool visible = 8;
inline bool Territory::has_visible() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Territory::set_has_visible() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Territory::clear_has_visible() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Territory::clear_visible() {
  visible_ = false;
  clear_has_visible();
}
inline bool Territory::visible() const {
  return visible_;
}
inline void Territory::set_visible(bool value) {
  set_has_visible();
  visible_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Buffers

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Territory_2eproto__INCLUDED
