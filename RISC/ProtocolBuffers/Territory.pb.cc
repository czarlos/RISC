// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Territory.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Territory.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Buffers {

namespace {

const ::google::protobuf::Descriptor* Territory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Territory_reflection_ = NULL;
const ::google::protobuf::Descriptor* Territory_ResourceType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Territory_ResourceType_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Territory_2eproto() {
  protobuf_AddDesc_Territory_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Territory.proto");
  GOOGLE_CHECK(file != NULL);
  Territory_descriptor_ = file->message_type(0);
  static const int Territory_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Territory, territoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Territory, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Territory, maxresourceproduction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Territory, maxcapacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Territory, production_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Territory, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Territory, contents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Territory, visible_),
  };
  Territory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Territory_descriptor_,
      Territory::default_instance_,
      Territory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Territory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Territory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Territory));
  Territory_ResourceType_descriptor_ = Territory_descriptor_->nested_type(0);
  static const int Territory_ResourceType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Territory_ResourceType, resourcename_),
  };
  Territory_ResourceType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Territory_ResourceType_descriptor_,
      Territory_ResourceType::default_instance_,
      Territory_ResourceType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Territory_ResourceType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Territory_ResourceType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Territory_ResourceType));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Territory_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Territory_descriptor_, &Territory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Territory_ResourceType_descriptor_, &Territory_ResourceType::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Territory_2eproto() {
  delete Territory::default_instance_;
  delete Territory_reflection_;
  delete Territory_ResourceType::default_instance_;
  delete Territory_ResourceType_reflection_;
}

void protobuf_AddDesc_Territory_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Buffers::protobuf_AddDesc_Unit_2eproto();
  ::Buffers::protobuf_AddDesc_Location_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017Territory.proto\022\007Buffers\032\nUnit.proto\032\016"
    "Location.proto\"\225\002\n\tTerritory\022\023\n\013territor"
    "yID\030\001 \001(\t\022\r\n\005owner\030\002 \001(\t\022\035\n\025maxResourceP"
    "roduction\030\003 \001(\005\022\023\n\013maxCapacity\030\004 \001(\005\0223\n\n"
    "production\030\005 \003(\0132\037.Buffers.Territory.Res"
    "ourceType\022#\n\010location\030\006 \002(\0132\021.Buffers.Lo"
    "cation\022\037\n\010contents\030\007 \003(\0132\r.Buffers.Unit\022"
    "\017\n\007visible\030\010 \002(\010\032$\n\014ResourceType\022\024\n\014reso"
    "urceName\030\001 \002(\t", 334);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Territory.proto", &protobuf_RegisterTypes);
  Territory::default_instance_ = new Territory();
  Territory_ResourceType::default_instance_ = new Territory_ResourceType();
  Territory::default_instance_->InitAsDefaultInstance();
  Territory_ResourceType::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Territory_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Territory_2eproto {
  StaticDescriptorInitializer_Territory_2eproto() {
    protobuf_AddDesc_Territory_2eproto();
  }
} static_descriptor_initializer_Territory_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Territory_ResourceType::kResourceNameFieldNumber;
#endif  // !_MSC_VER

Territory_ResourceType::Territory_ResourceType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Territory_ResourceType::InitAsDefaultInstance() {
}

Territory_ResourceType::Territory_ResourceType(const Territory_ResourceType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Territory_ResourceType::SharedCtor() {
  _cached_size_ = 0;
  resourcename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Territory_ResourceType::~Territory_ResourceType() {
  SharedDtor();
}

void Territory_ResourceType::SharedDtor() {
  if (resourcename_ != &::google::protobuf::internal::kEmptyString) {
    delete resourcename_;
  }
  if (this != default_instance_) {
  }
}

void Territory_ResourceType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Territory_ResourceType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Territory_ResourceType_descriptor_;
}

const Territory_ResourceType& Territory_ResourceType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Territory_2eproto();
  return *default_instance_;
}

Territory_ResourceType* Territory_ResourceType::default_instance_ = NULL;

Territory_ResourceType* Territory_ResourceType::New() const {
  return new Territory_ResourceType;
}

void Territory_ResourceType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_resourcename()) {
      if (resourcename_ != &::google::protobuf::internal::kEmptyString) {
        resourcename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Territory_ResourceType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string resourceName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourcename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resourcename().data(), this->resourcename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Territory_ResourceType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string resourceName = 1;
  if (has_resourcename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resourcename().data(), this->resourcename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->resourcename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Territory_ResourceType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string resourceName = 1;
  if (has_resourcename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resourcename().data(), this->resourcename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->resourcename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Territory_ResourceType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string resourceName = 1;
    if (has_resourcename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resourcename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Territory_ResourceType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Territory_ResourceType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Territory_ResourceType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Territory_ResourceType::MergeFrom(const Territory_ResourceType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resourcename()) {
      set_resourcename(from.resourcename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Territory_ResourceType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Territory_ResourceType::CopyFrom(const Territory_ResourceType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Territory_ResourceType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Territory_ResourceType::Swap(Territory_ResourceType* other) {
  if (other != this) {
    std::swap(resourcename_, other->resourcename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Territory_ResourceType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Territory_ResourceType_descriptor_;
  metadata.reflection = Territory_ResourceType_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Territory::kTerritoryIDFieldNumber;
const int Territory::kOwnerFieldNumber;
const int Territory::kMaxResourceProductionFieldNumber;
const int Territory::kMaxCapacityFieldNumber;
const int Territory::kProductionFieldNumber;
const int Territory::kLocationFieldNumber;
const int Territory::kContentsFieldNumber;
const int Territory::kVisibleFieldNumber;
#endif  // !_MSC_VER

Territory::Territory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Territory::InitAsDefaultInstance() {
  location_ = const_cast< ::Buffers::Location*>(&::Buffers::Location::default_instance());
}

Territory::Territory(const Territory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Territory::SharedCtor() {
  _cached_size_ = 0;
  territoryid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  owner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxresourceproduction_ = 0;
  maxcapacity_ = 0;
  location_ = NULL;
  visible_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Territory::~Territory() {
  SharedDtor();
}

void Territory::SharedDtor() {
  if (territoryid_ != &::google::protobuf::internal::kEmptyString) {
    delete territoryid_;
  }
  if (owner_ != &::google::protobuf::internal::kEmptyString) {
    delete owner_;
  }
  if (this != default_instance_) {
    delete location_;
  }
}

void Territory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Territory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Territory_descriptor_;
}

const Territory& Territory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Territory_2eproto();
  return *default_instance_;
}

Territory* Territory::default_instance_ = NULL;

Territory* Territory::New() const {
  return new Territory;
}

void Territory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_territoryid()) {
      if (territoryid_ != &::google::protobuf::internal::kEmptyString) {
        territoryid_->clear();
      }
    }
    if (has_owner()) {
      if (owner_ != &::google::protobuf::internal::kEmptyString) {
        owner_->clear();
      }
    }
    maxresourceproduction_ = 0;
    maxcapacity_ = 0;
    if (has_location()) {
      if (location_ != NULL) location_->::Buffers::Location::Clear();
    }
    visible_ = false;
  }
  production_.Clear();
  contents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Territory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string territoryID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_territoryid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->territoryid().data(), this->territoryid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_owner;
        break;
      }

      // optional string owner = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->owner().data(), this->owner().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxResourceProduction;
        break;
      }

      // optional int32 maxResourceProduction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxResourceProduction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxresourceproduction_)));
          set_has_maxresourceproduction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxCapacity;
        break;
      }

      // optional int32 maxCapacity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxCapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcapacity_)));
          set_has_maxcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_production;
        break;
      }

      // repeated .Buffers.Territory.ResourceType production = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_production:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_production()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_production;
        if (input->ExpectTag(50)) goto parse_location;
        break;
      }

      // required .Buffers.Location location = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_contents;
        break;
      }

      // repeated .Buffers.Unit contents = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_contents;
        if (input->ExpectTag(64)) goto parse_visible;
        break;
      }

      // required bool visible = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Territory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string territoryID = 1;
  if (has_territoryid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->territoryid().data(), this->territoryid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->territoryid(), output);
  }

  // optional string owner = 2;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->owner(), output);
  }

  // optional int32 maxResourceProduction = 3;
  if (has_maxresourceproduction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxresourceproduction(), output);
  }

  // optional int32 maxCapacity = 4;
  if (has_maxcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxcapacity(), output);
  }

  // repeated .Buffers.Territory.ResourceType production = 5;
  for (int i = 0; i < this->production_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->production(i), output);
  }

  // required .Buffers.Location location = 6;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->location(), output);
  }

  // repeated .Buffers.Unit contents = 7;
  for (int i = 0; i < this->contents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->contents(i), output);
  }

  // required bool visible = 8;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->visible(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Territory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string territoryID = 1;
  if (has_territoryid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->territoryid().data(), this->territoryid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->territoryid(), target);
  }

  // optional string owner = 2;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->owner(), target);
  }

  // optional int32 maxResourceProduction = 3;
  if (has_maxresourceproduction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxresourceproduction(), target);
  }

  // optional int32 maxCapacity = 4;
  if (has_maxcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxcapacity(), target);
  }

  // repeated .Buffers.Territory.ResourceType production = 5;
  for (int i = 0; i < this->production_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->production(i), target);
  }

  // required .Buffers.Location location = 6;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->location(), target);
  }

  // repeated .Buffers.Unit contents = 7;
  for (int i = 0; i < this->contents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->contents(i), target);
  }

  // required bool visible = 8;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->visible(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Territory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string territoryID = 1;
    if (has_territoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->territoryid());
    }

    // optional string owner = 2;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner());
    }

    // optional int32 maxResourceProduction = 3;
    if (has_maxresourceproduction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxresourceproduction());
    }

    // optional int32 maxCapacity = 4;
    if (has_maxcapacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcapacity());
    }

    // required .Buffers.Location location = 6;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

    // required bool visible = 8;
    if (has_visible()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Buffers.Territory.ResourceType production = 5;
  total_size += 1 * this->production_size();
  for (int i = 0; i < this->production_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->production(i));
  }

  // repeated .Buffers.Unit contents = 7;
  total_size += 1 * this->contents_size();
  for (int i = 0; i < this->contents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Territory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Territory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Territory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Territory::MergeFrom(const Territory& from) {
  GOOGLE_CHECK_NE(&from, this);
  production_.MergeFrom(from.production_);
  contents_.MergeFrom(from.contents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_territoryid()) {
      set_territoryid(from.territoryid());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_maxresourceproduction()) {
      set_maxresourceproduction(from.maxresourceproduction());
    }
    if (from.has_maxcapacity()) {
      set_maxcapacity(from.maxcapacity());
    }
    if (from.has_location()) {
      mutable_location()->::Buffers::Location::MergeFrom(from.location());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Territory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Territory::CopyFrom(const Territory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Territory::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000a0) != 0x000000a0) return false;

  for (int i = 0; i < production_size(); i++) {
    if (!this->production(i).IsInitialized()) return false;
  }
  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  for (int i = 0; i < contents_size(); i++) {
    if (!this->contents(i).IsInitialized()) return false;
  }
  return true;
}

void Territory::Swap(Territory* other) {
  if (other != this) {
    std::swap(territoryid_, other->territoryid_);
    std::swap(owner_, other->owner_);
    std::swap(maxresourceproduction_, other->maxresourceproduction_);
    std::swap(maxcapacity_, other->maxcapacity_);
    production_.Swap(&other->production_);
    std::swap(location_, other->location_);
    contents_.Swap(&other->contents_);
    std::swap(visible_, other->visible_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Territory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Territory_descriptor_;
  metadata.reflection = Territory_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Buffers

// @@protoc_insertion_point(global_scope)
