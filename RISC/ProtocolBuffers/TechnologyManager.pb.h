// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TechnologyManager.proto

#ifndef PROTOBUF_TechnologyManager_2eproto__INCLUDED
#define PROTOBUF_TechnologyManager_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Unit.pb.h"
#include "UnitType.pb.h"
// @@protoc_insertion_point(includes)

namespace Buffers {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TechnologyManager_2eproto();
void protobuf_AssignDesc_TechnologyManager_2eproto();
void protobuf_ShutdownFile_TechnologyManager_2eproto();

class TechnologyManager;

// ===================================================================

class TechnologyManager : public ::google::protobuf::Message {
 public:
  TechnologyManager();
  virtual ~TechnologyManager();

  TechnologyManager(const TechnologyManager& from);

  inline TechnologyManager& operator=(const TechnologyManager& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TechnologyManager& default_instance();

  void Swap(TechnologyManager* other);

  // implements Message ----------------------------------------------

  TechnologyManager* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TechnologyManager& from);
  void MergeFrom(const TechnologyManager& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 technologyPoints = 1;
  inline bool has_technologypoints() const;
  inline void clear_technologypoints();
  static const int kTechnologyPointsFieldNumber = 1;
  inline ::google::protobuf::int32 technologypoints() const;
  inline void set_technologypoints(::google::protobuf::int32 value);

  // repeated .Buffers.UnitType possibleUpgrades = 2;
  inline int possibleupgrades_size() const;
  inline void clear_possibleupgrades();
  static const int kPossibleUpgradesFieldNumber = 2;
  inline const ::Buffers::UnitType& possibleupgrades(int index) const;
  inline ::Buffers::UnitType* mutable_possibleupgrades(int index);
  inline ::Buffers::UnitType* add_possibleupgrades();
  inline const ::google::protobuf::RepeatedPtrField< ::Buffers::UnitType >&
      possibleupgrades() const;
  inline ::google::protobuf::RepeatedPtrField< ::Buffers::UnitType >*
      mutable_possibleupgrades();

  // repeated .Buffers.UnitType unavailableUpgrades = 3;
  inline int unavailableupgrades_size() const;
  inline void clear_unavailableupgrades();
  static const int kUnavailableUpgradesFieldNumber = 3;
  inline const ::Buffers::UnitType& unavailableupgrades(int index) const;
  inline ::Buffers::UnitType* mutable_unavailableupgrades(int index);
  inline ::Buffers::UnitType* add_unavailableupgrades();
  inline const ::google::protobuf::RepeatedPtrField< ::Buffers::UnitType >&
      unavailableupgrades() const;
  inline ::google::protobuf::RepeatedPtrField< ::Buffers::UnitType >*
      mutable_unavailableupgrades();

  // @@protoc_insertion_point(class_scope:Buffers.TechnologyManager)
 private:
  inline void set_has_technologypoints();
  inline void clear_has_technologypoints();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Buffers::UnitType > possibleupgrades_;
  ::google::protobuf::RepeatedPtrField< ::Buffers::UnitType > unavailableupgrades_;
  ::google::protobuf::int32 technologypoints_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TechnologyManager_2eproto();
  friend void protobuf_AssignDesc_TechnologyManager_2eproto();
  friend void protobuf_ShutdownFile_TechnologyManager_2eproto();

  void InitAsDefaultInstance();
  static TechnologyManager* default_instance_;
};
// ===================================================================


// ===================================================================

// TechnologyManager

// required int32 technologyPoints = 1;
inline bool TechnologyManager::has_technologypoints() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TechnologyManager::set_has_technologypoints() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TechnologyManager::clear_has_technologypoints() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TechnologyManager::clear_technologypoints() {
  technologypoints_ = 0;
  clear_has_technologypoints();
}
inline ::google::protobuf::int32 TechnologyManager::technologypoints() const {
  return technologypoints_;
}
inline void TechnologyManager::set_technologypoints(::google::protobuf::int32 value) {
  set_has_technologypoints();
  technologypoints_ = value;
}

// repeated .Buffers.UnitType possibleUpgrades = 2;
inline int TechnologyManager::possibleupgrades_size() const {
  return possibleupgrades_.size();
}
inline void TechnologyManager::clear_possibleupgrades() {
  possibleupgrades_.Clear();
}
inline const ::Buffers::UnitType& TechnologyManager::possibleupgrades(int index) const {
  return possibleupgrades_.Get(index);
}
inline ::Buffers::UnitType* TechnologyManager::mutable_possibleupgrades(int index) {
  return possibleupgrades_.Mutable(index);
}
inline ::Buffers::UnitType* TechnologyManager::add_possibleupgrades() {
  return possibleupgrades_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Buffers::UnitType >&
TechnologyManager::possibleupgrades() const {
  return possibleupgrades_;
}
inline ::google::protobuf::RepeatedPtrField< ::Buffers::UnitType >*
TechnologyManager::mutable_possibleupgrades() {
  return &possibleupgrades_;
}

// repeated .Buffers.UnitType unavailableUpgrades = 3;
inline int TechnologyManager::unavailableupgrades_size() const {
  return unavailableupgrades_.size();
}
inline void TechnologyManager::clear_unavailableupgrades() {
  unavailableupgrades_.Clear();
}
inline const ::Buffers::UnitType& TechnologyManager::unavailableupgrades(int index) const {
  return unavailableupgrades_.Get(index);
}
inline ::Buffers::UnitType* TechnologyManager::mutable_unavailableupgrades(int index) {
  return unavailableupgrades_.Mutable(index);
}
inline ::Buffers::UnitType* TechnologyManager::add_unavailableupgrades() {
  return unavailableupgrades_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Buffers::UnitType >&
TechnologyManager::unavailableupgrades() const {
  return unavailableupgrades_;
}
inline ::google::protobuf::RepeatedPtrField< ::Buffers::UnitType >*
TechnologyManager::mutable_unavailableupgrades() {
  return &unavailableupgrades_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Buffers

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TechnologyManager_2eproto__INCLUDED
