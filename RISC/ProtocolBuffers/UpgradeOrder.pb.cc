// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UpgradeOrder.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UpgradeOrder.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Buffers {

namespace {

const ::google::protobuf::Descriptor* UpgradeOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeOrder_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_UpgradeOrder_2eproto() {
  protobuf_AddDesc_UpgradeOrder_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UpgradeOrder.proto");
  GOOGLE_CHECK(file != NULL);
  UpgradeOrder_descriptor_ = file->message_type(0);
  static const int UpgradeOrder_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeOrder, unitstoupgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeOrder, unittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeOrder, technologymanager_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeOrder, unlocking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeOrder, unitupgrading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeOrder, convertingupgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeOrder, makespy_),
  };
  UpgradeOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeOrder_descriptor_,
      UpgradeOrder::default_instance_,
      UpgradeOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeOrder));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UpgradeOrder_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeOrder_descriptor_, &UpgradeOrder::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UpgradeOrder_2eproto() {
  delete UpgradeOrder::default_instance_;
  delete UpgradeOrder_reflection_;
}

void protobuf_AddDesc_UpgradeOrder_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Buffers::protobuf_AddDesc_Unit_2eproto();
  ::Buffers::protobuf_AddDesc_UnitType_2eproto();
  ::Buffers::protobuf_AddDesc_TechnologyManager_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022UpgradeOrder.proto\022\007Buffers\032\nUnit.prot"
    "o\032\016UnitType.proto\032\027TechnologyManager.pro"
    "to\"\347\001\n\014UpgradeOrder\022%\n\016unitsToUpgrade\030\001 "
    "\003(\0132\r.Buffers.Unit\022#\n\010unitType\030\002 \002(\0132\021.B"
    "uffers.UnitType\0225\n\021technologyManager\030\003 \002"
    "(\0132\032.Buffers.TechnologyManager\022\021\n\tunlock"
    "ing\030\004 \002(\010\022\025\n\runitUpgrading\030\005 \002(\010\022\031\n\021conv"
    "ertingUpgrade\030\006 \002(\010\022\017\n\007makeSpy\030\007 \002(\010", 316);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UpgradeOrder.proto", &protobuf_RegisterTypes);
  UpgradeOrder::default_instance_ = new UpgradeOrder();
  UpgradeOrder::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UpgradeOrder_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UpgradeOrder_2eproto {
  StaticDescriptorInitializer_UpgradeOrder_2eproto() {
    protobuf_AddDesc_UpgradeOrder_2eproto();
  }
} static_descriptor_initializer_UpgradeOrder_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UpgradeOrder::kUnitsToUpgradeFieldNumber;
const int UpgradeOrder::kUnitTypeFieldNumber;
const int UpgradeOrder::kTechnologyManagerFieldNumber;
const int UpgradeOrder::kUnlockingFieldNumber;
const int UpgradeOrder::kUnitUpgradingFieldNumber;
const int UpgradeOrder::kConvertingUpgradeFieldNumber;
const int UpgradeOrder::kMakeSpyFieldNumber;
#endif  // !_MSC_VER

UpgradeOrder::UpgradeOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeOrder::InitAsDefaultInstance() {
  unittype_ = const_cast< ::Buffers::UnitType*>(&::Buffers::UnitType::default_instance());
  technologymanager_ = const_cast< ::Buffers::TechnologyManager*>(&::Buffers::TechnologyManager::default_instance());
}

UpgradeOrder::UpgradeOrder(const UpgradeOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeOrder::SharedCtor() {
  _cached_size_ = 0;
  unittype_ = NULL;
  technologymanager_ = NULL;
  unlocking_ = false;
  unitupgrading_ = false;
  convertingupgrade_ = false;
  makespy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeOrder::~UpgradeOrder() {
  SharedDtor();
}

void UpgradeOrder::SharedDtor() {
  if (this != default_instance_) {
    delete unittype_;
    delete technologymanager_;
  }
}

void UpgradeOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeOrder_descriptor_;
}

const UpgradeOrder& UpgradeOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UpgradeOrder_2eproto();
  return *default_instance_;
}

UpgradeOrder* UpgradeOrder::default_instance_ = NULL;

UpgradeOrder* UpgradeOrder::New() const {
  return new UpgradeOrder;
}

void UpgradeOrder::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_unittype()) {
      if (unittype_ != NULL) unittype_->::Buffers::UnitType::Clear();
    }
    if (has_technologymanager()) {
      if (technologymanager_ != NULL) technologymanager_->::Buffers::TechnologyManager::Clear();
    }
    unlocking_ = false;
    unitupgrading_ = false;
    convertingupgrade_ = false;
    makespy_ = false;
  }
  unitstoupgrade_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpgradeOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Buffers.Unit unitsToUpgrade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitsToUpgrade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitstoupgrade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_unitsToUpgrade;
        if (input->ExpectTag(18)) goto parse_unitType;
        break;
      }

      // required .Buffers.UnitType unitType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unittype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_technologyManager;
        break;
      }

      // required .Buffers.TechnologyManager technologyManager = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_technologyManager:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_technologymanager()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_unlocking;
        break;
      }

      // required bool unlocking = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlocking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unlocking_)));
          set_has_unlocking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_unitUpgrading;
        break;
      }

      // required bool unitUpgrading = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitUpgrading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unitupgrading_)));
          set_has_unitupgrading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_convertingUpgrade;
        break;
      }

      // required bool convertingUpgrade = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_convertingUpgrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &convertingupgrade_)));
          set_has_convertingupgrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_makeSpy;
        break;
      }

      // required bool makeSpy = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_makeSpy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &makespy_)));
          set_has_makespy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpgradeOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Buffers.Unit unitsToUpgrade = 1;
  for (int i = 0; i < this->unitstoupgrade_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unitstoupgrade(i), output);
  }

  // required .Buffers.UnitType unitType = 2;
  if (has_unittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unittype(), output);
  }

  // required .Buffers.TechnologyManager technologyManager = 3;
  if (has_technologymanager()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->technologymanager(), output);
  }

  // required bool unlocking = 4;
  if (has_unlocking()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->unlocking(), output);
  }

  // required bool unitUpgrading = 5;
  if (has_unitupgrading()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->unitupgrading(), output);
  }

  // required bool convertingUpgrade = 6;
  if (has_convertingupgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->convertingupgrade(), output);
  }

  // required bool makeSpy = 7;
  if (has_makespy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->makespy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Buffers.Unit unitsToUpgrade = 1;
  for (int i = 0; i < this->unitstoupgrade_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unitstoupgrade(i), target);
  }

  // required .Buffers.UnitType unitType = 2;
  if (has_unittype()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unittype(), target);
  }

  // required .Buffers.TechnologyManager technologyManager = 3;
  if (has_technologymanager()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->technologymanager(), target);
  }

  // required bool unlocking = 4;
  if (has_unlocking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->unlocking(), target);
  }

  // required bool unitUpgrading = 5;
  if (has_unitupgrading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->unitupgrading(), target);
  }

  // required bool convertingUpgrade = 6;
  if (has_convertingupgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->convertingupgrade(), target);
  }

  // required bool makeSpy = 7;
  if (has_makespy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->makespy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .Buffers.UnitType unitType = 2;
    if (has_unittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unittype());
    }

    // required .Buffers.TechnologyManager technologyManager = 3;
    if (has_technologymanager()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->technologymanager());
    }

    // required bool unlocking = 4;
    if (has_unlocking()) {
      total_size += 1 + 1;
    }

    // required bool unitUpgrading = 5;
    if (has_unitupgrading()) {
      total_size += 1 + 1;
    }

    // required bool convertingUpgrade = 6;
    if (has_convertingupgrade()) {
      total_size += 1 + 1;
    }

    // required bool makeSpy = 7;
    if (has_makespy()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Buffers.Unit unitsToUpgrade = 1;
  total_size += 1 * this->unitstoupgrade_size();
  for (int i = 0; i < this->unitstoupgrade_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitstoupgrade(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpgradeOrder::MergeFrom(const UpgradeOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitstoupgrade_.MergeFrom(from.unitstoupgrade_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_unittype()) {
      mutable_unittype()->::Buffers::UnitType::MergeFrom(from.unittype());
    }
    if (from.has_technologymanager()) {
      mutable_technologymanager()->::Buffers::TechnologyManager::MergeFrom(from.technologymanager());
    }
    if (from.has_unlocking()) {
      set_unlocking(from.unlocking());
    }
    if (from.has_unitupgrading()) {
      set_unitupgrading(from.unitupgrading());
    }
    if (from.has_convertingupgrade()) {
      set_convertingupgrade(from.convertingupgrade());
    }
    if (from.has_makespy()) {
      set_makespy(from.makespy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpgradeOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeOrder::CopyFrom(const UpgradeOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007e) != 0x0000007e) return false;

  for (int i = 0; i < unitstoupgrade_size(); i++) {
    if (!this->unitstoupgrade(i).IsInitialized()) return false;
  }
  if (has_unittype()) {
    if (!this->unittype().IsInitialized()) return false;
  }
  if (has_technologymanager()) {
    if (!this->technologymanager().IsInitialized()) return false;
  }
  return true;
}

void UpgradeOrder::Swap(UpgradeOrder* other) {
  if (other != this) {
    unitstoupgrade_.Swap(&other->unitstoupgrade_);
    std::swap(unittype_, other->unittype_);
    std::swap(technologymanager_, other->technologymanager_);
    std::swap(unlocking_, other->unlocking_);
    std::swap(unitupgrading_, other->unitupgrading_);
    std::swap(convertingupgrade_, other->convertingupgrade_);
    std::swap(makespy_, other->makespy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpgradeOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeOrder_descriptor_;
  metadata.reflection = UpgradeOrder_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Buffers

// @@protoc_insertion_point(global_scope)
