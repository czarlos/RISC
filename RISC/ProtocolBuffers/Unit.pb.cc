// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Unit.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Unit.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Buffers {

namespace {

const ::google::protobuf::Descriptor* Unit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Unit_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Unit_2eproto() {
  protobuf_AddDesc_Unit_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Unit.proto");
  GOOGLE_CHECK(file != NULL);
  Unit_descriptor_ = file->message_type(0);
  static const int Unit_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, unittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, teamname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, unitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, movementrange_),
  };
  Unit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Unit_descriptor_,
      Unit::default_instance_,
      Unit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Unit));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Unit_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Unit_descriptor_, &Unit::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Unit_2eproto() {
  delete Unit::default_instance_;
  delete Unit_reflection_;
}

void protobuf_AddDesc_Unit_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Buffers::protobuf_AddDesc_UnitType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nUnit.proto\022\007Buffers\032\016UnitType.proto\"t\n"
    "\004Unit\022\016\n\006health\030\001 \002(\005\022#\n\010unitType\030\002 \002(\0132"
    "\021.Buffers.UnitType\022\020\n\010teamName\030\003 \002(\t\022\016\n\006"
    "unitID\030\004 \002(\t\022\025\n\rmovementRange\030\005 \002(\005", 155);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Unit.proto", &protobuf_RegisterTypes);
  Unit::default_instance_ = new Unit();
  Unit::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Unit_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Unit_2eproto {
  StaticDescriptorInitializer_Unit_2eproto() {
    protobuf_AddDesc_Unit_2eproto();
  }
} static_descriptor_initializer_Unit_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Unit::kHealthFieldNumber;
const int Unit::kUnitTypeFieldNumber;
const int Unit::kTeamNameFieldNumber;
const int Unit::kUnitIDFieldNumber;
const int Unit::kMovementRangeFieldNumber;
#endif  // !_MSC_VER

Unit::Unit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Unit::InitAsDefaultInstance() {
  unittype_ = const_cast< ::Buffers::UnitType*>(&::Buffers::UnitType::default_instance());
}

Unit::Unit(const Unit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Unit::SharedCtor() {
  _cached_size_ = 0;
  health_ = 0;
  unittype_ = NULL;
  teamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unitid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  movementrange_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Unit::~Unit() {
  SharedDtor();
}

void Unit::SharedDtor() {
  if (teamname_ != &::google::protobuf::internal::kEmptyString) {
    delete teamname_;
  }
  if (unitid_ != &::google::protobuf::internal::kEmptyString) {
    delete unitid_;
  }
  if (this != default_instance_) {
    delete unittype_;
  }
}

void Unit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Unit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Unit_descriptor_;
}

const Unit& Unit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Unit_2eproto();
  return *default_instance_;
}

Unit* Unit::default_instance_ = NULL;

Unit* Unit::New() const {
  return new Unit;
}

void Unit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    health_ = 0;
    if (has_unittype()) {
      if (unittype_ != NULL) unittype_->::Buffers::UnitType::Clear();
    }
    if (has_teamname()) {
      if (teamname_ != &::google::protobuf::internal::kEmptyString) {
        teamname_->clear();
      }
    }
    if (has_unitid()) {
      if (unitid_ != &::google::protobuf::internal::kEmptyString) {
        unitid_->clear();
      }
    }
    movementrange_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Unit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 health = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unitType;
        break;
      }

      // required .Buffers.UnitType unitType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unittype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_teamName;
        break;
      }

      // required string teamName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->teamname().data(), this->teamname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_unitID;
        break;
      }

      // required string unitID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unitid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unitid().data(), this->unitid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_movementRange;
        break;
      }

      // required int32 movementRange = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_movementRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movementrange_)));
          set_has_movementrange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Unit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 health = 1;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->health(), output);
  }

  // required .Buffers.UnitType unitType = 2;
  if (has_unittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unittype(), output);
  }

  // required string teamName = 3;
  if (has_teamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teamname().data(), this->teamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->teamname(), output);
  }

  // required string unitID = 4;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitid().data(), this->unitid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->unitid(), output);
  }

  // required int32 movementRange = 5;
  if (has_movementrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->movementrange(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Unit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 health = 1;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->health(), target);
  }

  // required .Buffers.UnitType unitType = 2;
  if (has_unittype()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unittype(), target);
  }

  // required string teamName = 3;
  if (has_teamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teamname().data(), this->teamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->teamname(), target);
  }

  // required string unitID = 4;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitid().data(), this->unitid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->unitid(), target);
  }

  // required int32 movementRange = 5;
  if (has_movementrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->movementrange(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Unit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 health = 1;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

    // required .Buffers.UnitType unitType = 2;
    if (has_unittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unittype());
    }

    // required string teamName = 3;
    if (has_teamname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamname());
    }

    // required string unitID = 4;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unitid());
    }

    // required int32 movementRange = 5;
    if (has_movementrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movementrange());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Unit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Unit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Unit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Unit::MergeFrom(const Unit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_health()) {
      set_health(from.health());
    }
    if (from.has_unittype()) {
      mutable_unittype()->::Buffers::UnitType::MergeFrom(from.unittype());
    }
    if (from.has_teamname()) {
      set_teamname(from.teamname());
    }
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
    if (from.has_movementrange()) {
      set_movementrange(from.movementrange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Unit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Unit::CopyFrom(const Unit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unit::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_unittype()) {
    if (!this->unittype().IsInitialized()) return false;
  }
  return true;
}

void Unit::Swap(Unit* other) {
  if (other != this) {
    std::swap(health_, other->health_);
    std::swap(unittype_, other->unittype_);
    std::swap(teamname_, other->teamname_);
    std::swap(unitid_, other->unitid_);
    std::swap(movementrange_, other->movementrange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Unit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Unit_descriptor_;
  metadata.reflection = Unit_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Buffers

// @@protoc_insertion_point(global_scope)
