// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UnitType.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UnitType.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Buffers {

namespace {

const ::google::protobuf::Descriptor* UnitType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitType_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_UnitType_2eproto() {
  protobuf_AddDesc_UnitType_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UnitType.proto");
  GOOGLE_CHECK(file != NULL);
  UnitType_descriptor_ = file->message_type(0);
  static const int UnitType_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitType, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitType, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitType, combatbonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitType, upgradecost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitType, costtounlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitType, spy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitType, nexttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitType, previoustype_),
  };
  UnitType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitType_descriptor_,
      UnitType::default_instance_,
      UnitType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitType));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UnitType_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitType_descriptor_, &UnitType::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UnitType_2eproto() {
  delete UnitType::default_instance_;
  delete UnitType_reflection_;
}

void protobuf_AddDesc_UnitType_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016UnitType.proto\022\007Buffers\"\234\001\n\010UnitType\022\r"
    "\n\005level\030\001 \002(\005\022\014\n\004type\030\002 \002(\t\022\023\n\013combatBon"
    "us\030\003 \002(\005\022\023\n\013upgradeCost\030\004 \002(\005\022\024\n\014costToU"
    "nlock\030\005 \002(\005\022\013\n\003spy\030\006 \002(\010\022\020\n\010nextType\030\007 \002"
    "(\t\022\024\n\014previousType\030\010 \002(\t", 184);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UnitType.proto", &protobuf_RegisterTypes);
  UnitType::default_instance_ = new UnitType();
  UnitType::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UnitType_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UnitType_2eproto {
  StaticDescriptorInitializer_UnitType_2eproto() {
    protobuf_AddDesc_UnitType_2eproto();
  }
} static_descriptor_initializer_UnitType_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UnitType::kLevelFieldNumber;
const int UnitType::kTypeFieldNumber;
const int UnitType::kCombatBonusFieldNumber;
const int UnitType::kUpgradeCostFieldNumber;
const int UnitType::kCostToUnlockFieldNumber;
const int UnitType::kSpyFieldNumber;
const int UnitType::kNextTypeFieldNumber;
const int UnitType::kPreviousTypeFieldNumber;
#endif  // !_MSC_VER

UnitType::UnitType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnitType::InitAsDefaultInstance() {
}

UnitType::UnitType(const UnitType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnitType::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  combatbonus_ = 0;
  upgradecost_ = 0;
  costtounlock_ = 0;
  spy_ = false;
  nexttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  previoustype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitType::~UnitType() {
  SharedDtor();
}

void UnitType::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (nexttype_ != &::google::protobuf::internal::kEmptyString) {
    delete nexttype_;
  }
  if (previoustype_ != &::google::protobuf::internal::kEmptyString) {
    delete previoustype_;
  }
  if (this != default_instance_) {
  }
}

void UnitType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitType_descriptor_;
}

const UnitType& UnitType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UnitType_2eproto();
  return *default_instance_;
}

UnitType* UnitType::default_instance_ = NULL;

UnitType* UnitType::New() const {
  return new UnitType;
}

void UnitType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    combatbonus_ = 0;
    upgradecost_ = 0;
    costtounlock_ = 0;
    spy_ = false;
    if (has_nexttype()) {
      if (nexttype_ != &::google::protobuf::internal::kEmptyString) {
        nexttype_->clear();
      }
    }
    if (has_previoustype()) {
      if (previoustype_ != &::google::protobuf::internal::kEmptyString) {
        previoustype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_combatBonus;
        break;
      }

      // required int32 combatBonus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combatBonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combatbonus_)));
          set_has_combatbonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_upgradeCost;
        break;
      }

      // required int32 upgradeCost = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgradeCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgradecost_)));
          set_has_upgradecost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_costToUnlock;
        break;
      }

      // required int32 costToUnlock = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costToUnlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costtounlock_)));
          set_has_costtounlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_spy;
        break;
      }

      // required bool spy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spy_)));
          set_has_spy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_nextType;
        break;
      }

      // required string nextType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nextType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nexttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nexttype().data(), this->nexttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_previousType;
        break;
      }

      // required string previousType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_previousType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_previoustype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->previoustype().data(), this->previoustype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // required int32 combatBonus = 3;
  if (has_combatbonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->combatbonus(), output);
  }

  // required int32 upgradeCost = 4;
  if (has_upgradecost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->upgradecost(), output);
  }

  // required int32 costToUnlock = 5;
  if (has_costtounlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->costtounlock(), output);
  }

  // required bool spy = 6;
  if (has_spy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->spy(), output);
  }

  // required string nextType = 7;
  if (has_nexttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nexttype().data(), this->nexttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->nexttype(), output);
  }

  // required string previousType = 8;
  if (has_previoustype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->previoustype().data(), this->previoustype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->previoustype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required int32 combatBonus = 3;
  if (has_combatbonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->combatbonus(), target);
  }

  // required int32 upgradeCost = 4;
  if (has_upgradecost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->upgradecost(), target);
  }

  // required int32 costToUnlock = 5;
  if (has_costtounlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->costtounlock(), target);
  }

  // required bool spy = 6;
  if (has_spy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->spy(), target);
  }

  // required string nextType = 7;
  if (has_nexttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nexttype().data(), this->nexttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->nexttype(), target);
  }

  // required string previousType = 8;
  if (has_previoustype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->previoustype().data(), this->previoustype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->previoustype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required int32 combatBonus = 3;
    if (has_combatbonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combatbonus());
    }

    // required int32 upgradeCost = 4;
    if (has_upgradecost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgradecost());
    }

    // required int32 costToUnlock = 5;
    if (has_costtounlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costtounlock());
    }

    // required bool spy = 6;
    if (has_spy()) {
      total_size += 1 + 1;
    }

    // required string nextType = 7;
    if (has_nexttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nexttype());
    }

    // required string previousType = 8;
    if (has_previoustype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->previoustype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitType::MergeFrom(const UnitType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_combatbonus()) {
      set_combatbonus(from.combatbonus());
    }
    if (from.has_upgradecost()) {
      set_upgradecost(from.upgradecost());
    }
    if (from.has_costtounlock()) {
      set_costtounlock(from.costtounlock());
    }
    if (from.has_spy()) {
      set_spy(from.spy());
    }
    if (from.has_nexttype()) {
      set_nexttype(from.nexttype());
    }
    if (from.has_previoustype()) {
      set_previoustype(from.previoustype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitType::CopyFrom(const UnitType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitType::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void UnitType::Swap(UnitType* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(type_, other->type_);
    std::swap(combatbonus_, other->combatbonus_);
    std::swap(upgradecost_, other->upgradecost_);
    std::swap(costtounlock_, other->costtounlock_);
    std::swap(spy_, other->spy_);
    std::swap(nexttype_, other->nexttype_);
    std::swap(previoustype_, other->previoustype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitType_descriptor_;
  metadata.reflection = UnitType_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Buffers

// @@protoc_insertion_point(global_scope)
